openapi: 3.0.0
info:
  title: Backend API's
  description: Backend Docs API docs
  version: 1.0.0
servers:
  - url: http://localhost:3000/v1
    description: Optional server description, e.g. Main (production) server
  - url: http://staging-api.example.com
    description: Optional server description, e.g. Internal staging server for testing
paths:
  /auth/user-signup:
    post:
      summary: User Signup.
      tags:
        - Auth
      description: Use this API to check registered New User
      requestBody:
        description: Structure of a User Signin
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/usersignup'
      security:
        - apiKeyAuth : []
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '200':
        description: OK (successfully authenticated)

  /auth/user-login:
    post:
      summary: User Signin OK.
      tags:
        - Auth
      description: Use this API to check login User
      requestBody:
        description: Structure of a User Login
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/usersignin'
      responses:
        "200":
          description: login successfully
        "400":
          description: The specified Email ID is invalid.
        "409":
          description: A user with the specified Email ID was not found.
        default:
          description: Unexpected error
  /users/get-users/:
    get:
      summary: All Users.
      tags:
        - User
      description: Display all users
      security:
      - bearerAuth: []
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '200':
          description: login successfully

  /users/add-new-user:
    post:
      summary: New User Add.
      tags:
        - User
      description: Use this API to check Create New User
      requestBody:
        description: Structure of a User Signin
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/usersignup'
      security:
      - bearerAuth: []
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '200':
          description: New user created successfully

  /users/get-user-dtls/{user_id}:
    get:
      summary: Show User Details.
      tags:
        - User
      description: Use this API to fetch details of a User
      parameters:
        - name: user_id
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: course display successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/userdtls"

  /users/update-user-dtls/:
    put:
      summary: Update User Details.
      tags:
        - User
      description: Use this API to check Update User Details
      requestBody:
        description: Structure of a User Update Details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/userupdtls'
      responses:
        "200":
          description: Update successfully
        
components:
  securitySchemes:
    bearerAuth:         
      type: http
      scheme: bearer
      bearerFormat: JWT
    apiKeyAuth:        # arbitrary name for the security scheme
      type: apiKey
      in: header       # can be "header", "query" or "cookie"
      name: X-API-KEY 
  responses:
    UnauthorizedError:
      description: Access token is missing or invalid
  schemas:
    course:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        id:
          type: intege
    usersignin:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
    usersignup:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        password:
          type: string
    userdtls:
      type: object
      properties:
        userId:
          type: string
    userupdtls:
      type: object
      properties:
        userId:
          type: string
        name:
          type: string
        email:
          type: string
        password:
          type: string